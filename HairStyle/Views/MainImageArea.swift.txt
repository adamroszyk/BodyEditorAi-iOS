import SwiftUI
import PhotosUI
import Vision
import SwiftUI
import Vision
import SwiftUI
import Vision
/*
struct MainImageArea: View {
    @ObservedObject var viewModel: ImageEditingViewModel
    @Binding var showingImagePicker: Bool
    @Binding var inputImage: UIImage?
    @Binding var sliderPosition: CGFloat
    @Binding var showSlider: Bool
    
    @State private var isAnimatingSlider = false
    
    var body: some View {
        GeometryReader { geometry in
            ZStack(alignment: .bottomLeading) {
                
                // Show different content depending on whether we have images or text
                mainContent(geometry: geometry)
                
                // Bottom-left "replace image" button if an image is loaded
                if inputImage != nil {
                    RefreshButton(showingImagePicker: $showingImagePicker)
                        .padding(.leading, 16)
                        .padding(.bottom, 16)
                }
            }
            .onAppear {
                animateSlider()
            }
        }
    }
    
    @ViewBuilder
    private func mainContent(geometry: GeometryProxy) -> some View {
        if let original = inputImage,
           let modified = viewModel.editedImage {
            ComparisonView(
                originalImage: original,
                modifiedImage: modified,
                sliderPosition: $sliderPosition,
                showSlider: $showSlider,
                geometry: geometry
            )
        } else if let modified = viewModel.editedImage {
            ModifiedImageView(
                image: modified,
                showSlider: $showSlider,
                geometry: geometry
            )
        } else if !viewModel.textResult.isEmpty {
            TextResultView(text: viewModel.textResult, geometry: geometry)
        } else {
            //EmptyStateView(onAddTap: onAddTap)
        }
    }
    
    
    
    struct RefreshButton: View {
        @Binding var showingImagePicker: Bool
        
        var body: some View {
            Button(action: {
                showingImagePicker = true
            }) {
                Image(systemName: "arrow.triangle.2.circlepath")
                    .font(.system(size: 22))
                    .foregroundColor(.white)
                    .frame(width: 44, height: 44)
                    .background(Color.black.opacity(0.5))
                    .clipShape(Circle())
            }
        }
    }
    
    private func animateSlider() {
        // ...existing animation code...
    }
}

struct ComparisonView: View {
    let originalImage: UIImage
    let modifiedImage: UIImage
    @Binding var sliderPosition: CGFloat
    @Binding var showSlider: Bool
    let geometry: GeometryProxy
    
    var body: some View {
        // Subtract 32 for left/right padding (16 on each side)
        let maxWidth = geometry.size.width - 32
        
        ZStack {
            // Original image
            Image(uiImage: originalImage)
                .resizable()
                .scaledToFit()
                // Keep the image at most `maxWidth` wide
                .frame(width: maxWidth)
            
            // Modified image
            Image(uiImage: modifiedImage)
                .resizable()
                .scaledToFit()
                .frame(width: maxWidth)
                .mask(
                    Rectangle()
                        .frame(width: maxWidth * sliderPosition)
                )
            
            // Slider at bottom
            VStack {
                Spacer()
                Slider(value: $sliderPosition, in: 0...1)
                    .padding(.horizontal, 30)
                    .padding(.bottom, 20)
            }
        }
        // Make the ZStack fill the parent so it stays centered
        .frame(width: geometry.size.width, height: geometry.size.height)
    }
}

struct ModifiedImageView: View {
    let image: UIImage
    @Binding var showSlider: Bool
    let geometry: GeometryProxy
    
    var body: some View {
        let maxWidth = geometry.size.width - 32
        
        ZStack {
            Image(uiImage: image)
                .resizable()
                .scaledToFit()
                .frame(width: maxWidth)
                .clipped()
        }
        .frame(width: geometry.size.width, height: geometry.size.height)
        .contentShape(Rectangle())
        .onTapGesture {
            withAnimation {
                showSlider = false
            }
        }
    }
}


struct TextResultView: View {
    let text: String
    let geometry: GeometryProxy
    
    var body: some View {
        ScrollView {
            Text(text)
                .padding()
        }
        .frame(width: geometry.size.width)
        .background(Color.gray.opacity(0.1))
    }
}

struct EmptyStateView: View {
    let onAddTap: () -> Void
    
    var body: some View {
        Rectangle()
            .fill(Color.gray.opacity(0.3))
            .overlay(
                VStack {
                    Spacer()
                    Button(action: {
                        onAddTap()
                    }) {
                        VStack(spacing: 12) {
                            Image(systemName: "photo.fill.on.rectangle.fill")
                                .font(.system(size: 40))
                            Text("Add Image")
                                .font(.headline)
                        }
                        .foregroundColor(.white)
                        .padding()
                        .background(Color.blue)
                        .cornerRadius(12)
                        .shadow(radius: 10)
                    }
                    Spacer()
                }
                .frame(height: 600)
            )
    }
}

struct AddImageButton: View {
    @Binding var showingImagePicker: Bool
    
    var body: some View {
        Button(action: {
            showingImagePicker = true
        }) {
            VStack(spacing: 12) {
                Image(systemName: "photo.fill.on.rectangle.fill")
                    .font(.system(size: 40))
                Text("Add Image")
                    .font(.headline)
            }
            .foregroundColor(.white)
            .padding()
            .background(Color.blue)
            .cornerRadius(12)
            .shadow(radius: 10)
        }
    }
}

struct RefreshButton: View {
    @Binding var showingImagePicker: Bool
    
    var body: some View {
        Button(action: {
            showingImagePicker = true
        }) {
            Image(systemName: "arrow.triangle.2.circlepath")
                .font(.system(size: 22))
                .foregroundColor(.white)
                .frame(width: 44, height: 44)
                .background(Color.black.opacity(0.5))
                .clipShape(Circle())
        }
        .padding(16)
    }
}
*/
